
  std::cout <<"cap insert= " <<  capacity() << std::endl;
	  std::cout <<"csize insert = " <<  size() << std::endl;

	 	for (iterator it = this->begin();it != pos;*it++)
		{
			_allocator.construct(new_ins + j, _data[j]);
			//_allocator.destroy(_data + j);
			j++;
		}
		size_t save = j;
	  	for (size_t i = 0; i < count;i++)
		{
			_allocator.construct(new_ins + j, val);
			j++;
		}   
   	 	for (size_t i = j ; i < _size + count ;i++)
		{
			_allocator.construct(new_ins+ i, _data[save]);
			 //_allocator.destroy(_data + save);
			save++;
		} 

    		void resize (size_type n, value_type val = value_type()) 
		{
			value_type *new_data = _allocator.allocate(n);
			if (n > _size) {
				for (size_t i = 0; i < _size; i++)
					_allocator.construct(new_data + i, *(_data + i));
				for (size_t i = 0; i < n - _size; i++)
					_allocator.construct(new_data + _size + i, val);
			}
			else {
				for (size_t i = 0; i < n; i++)
					_allocator.construct(new_data + i, *(_data + i));
			}
			if (_size) {
				_allocator.destroy(_data);
				_allocator.deallocate(_data, _capacity);
			}
			_capacity = n;
			_size = n;
			_data = new_data;
			//_allocator.destroy(new_data);
			//_allocator.deallocate(new_data, n);
		} 